# -*- coding: utf-8 -*-
"""Hotel_Bookings _Exploratory ___Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSV-fQmmhmVGgMnNIvdaIgF60nPlbbGU

# **Project Name**: **Hotel Bookings Exploratory Data Analysis-**

##### **Project Type**    - EDA
##### **Contribution**    - Team
##### **Team Member 1 -** Shatarupa Mishra
##### **Team Member 2 -** Mahboob Alam Khan

# **Project Summary -**

Hotel Booking Analysis EDA Summary

###**Introduction:**
The hotel industry is a dynamic and competitive sector that heavily relies on understanding customer preferences, booking patterns, and market trends. In this exploratory data analysis (EDA) summary, we analyzed a hotel booking dataset to gain insights into various aspects of the hotel booking process. The dataset provided valuable information about bookings, guests, and other related factors.

###**Descriptive Statistics:**
The first step in our analysis involved examining the dataset's descriptive statistics. We explored the basic characteristics of the data, including the number of observations, data types, missing values, and statistical summaries of key variables. This initial exploration provided an overview of the dataset's structure and allowed us to identify potential data cleaning or preprocessing requirements.

###**Guest Demographics:**
Understanding the demographic profile of hotel guests is crucial for targeting specific customer segments and tailoring marketing strategies. We analyzed variables such as guest nationality, age, and gender to uncover patterns and trends. By visualizing this data through histograms, bar plots, and other graphical representations, we identified the most common nationalities, age groups, and gender distributions among hotel guests.

###**Booking Patterns:**
Next, we delved into booking patterns to gain insights into how guests make reservations. We analyzed variables such as booking channels, lead time, and special requests. By examining the distribution of booking channels, we determined the most popular methods guests used to make reservations, such as online travel agencies, direct hotel websites, or offline travel agents. Additionally, we explored the lead time, or the duration between booking and arrival, to understand how far in advance guests typically made their reservations. We also investigated the frequency and types of special requests made by guests, such as room preferences or specific amenities.

###**Seasonality and Length of Stay:**
Understanding seasonal trends and the length of guest stays is crucial for revenue management and resource allocation. We explored the dataset to identify patterns in bookings based on months, seasons, and lengths of stay. By visualizing booking counts and average stays over time, we discovered peak and off-peak seasons, which can assist in optimizing pricing strategies and staffing levels during high-demand periods.

###**Cancellation Analysis:**
Cancellation rates have a significant impact on hotel revenue and operations. We analyzed the dataset to understand cancellation patterns and factors influencing cancellations. By examining variables such as deposit type, arrival date, and lead time, we identified correlations between these factors and cancellation rates. This analysis can help hotels develop strategies to minimize cancellations and optimize revenue management.

###**Correlation Analysis:**
To uncover relationships between variables, we performed correlation analysis. By calculating correlation coefficients, we determined the strength and direction of relationships between variables such as booking lead time, room type, and total cost. This analysis provided insights into which factors influenced booking decisions and helped identify potential areas for improvement or marketing opportunities.

###**Conclusion:**
In conclusion, this exploratory data analysis of the hotel booking dataset offered valuable insights into guest demographics, booking patterns, seasonality, cancellations, and correlations between variables. The findings can assist hotels in understanding customer preferences, optimizing revenue management, and improving marketing strategies. The analysis highlighted the importance of data-driven decision-making in the hotel industry and demonstrated how EDA can provide actionable insights for better business outcomes. Further analysis, predictive modeling, and machine learning techniques can be applied to the dataset to derive more advanced insights and develop accurate predictive models for hotel bookings.

# **GitHub Link -**

https://github.com/shatarupa1990/hotelbookinganalysis.project

# **Problem Statement**

The objective of this project is to perform exploratory data analysis on a hotel booking dataset to gain insights into guest demographics, booking patterns, seasonality, and cancellations. The analysis aims to understand customer preferences, optimize revenue management, and improve marketing strategies for the hotel industry. By examining variables such as guest nationality, booking channels, lead time, and cancellation rates, the project seeks to provide actionable insights that can guide decision-making and enhance operational efficiency in the hotel booking process.

###**Business Objectives :**

1. **Understanding Customer Preferences**: Gain insights into customer preferences, such as preferred room types, amenities, and booking channels, to tailor marketing strategies and enhance customer satisfaction.

2. **Optimizing Revenue Management**: Identify peak and off-peak seasons, length of stay patterns, and factors influencing cancellations to optimize pricing strategies, allocate resources effectively, and maximize revenue generation.

3. **Improving Operational Efficiency**: Identify areas for improvement in the booking process, such as reducing cancellations, streamlining check-in/check-out procedures, and optimizing staffing levels based on booking patterns.

4. **Enhancing Marketing Strategies**: Utilize customer demographic information, booking behavior, and seasonality trends to develop targeted marketing campaigns, promotions, and loyalty programs to attract new customers and retain existing ones.

5. **Identifying Market Trends**: Analyze market trends and competition by examining booking patterns, guest demographics, and customer preferences, to identify emerging trends, potential market opportunities, and areas for differentiation.

6. **Enhancing Customer Experience**: Gain insights into special requests, guest feedback, and preferences to improve overall customer experience, personalize services, and tailor offerings to meet specific customer needs.

7. **Mitigating Risks**: Identify potential risks and challenges in the booking process, such as high cancellation rates or seasonal fluctuations, and develop strategies to mitigate these risks through improved forecasting and operational planning.

8. **Data-Driven Decision Making**: Utilize data-driven insights from the analysis to guide strategic decision-making, enhance business planning, and support evidence-based decision-making across different departments within the hotel organization.

These business objectives aim to leverage the insights gained from the hotel booking analysis EDA to drive business growth, improve operational efficiency, enhance customer satisfaction, and gain a competitive edge in the hotel industry.

# **General Guidelines** : -

1.   Well-structured, formatted, and commented code is required.
2.   Exception Handling, Production Grade Code & Deployment Ready Code will be a plus. Those students will be awarded some additional credits.
     
     The additional credits will have advantages over other students during Star Student selection.
       
             [ Note: - Deployment Ready Code is defined as, the whole .ipynb notebook should be executable in one go
                       without a single error logged. ]

3.   Each and every logic should have proper comments.
4. You may add as many number of charts you want. Make Sure for each and every chart the following format should be answered.
        

```
# Chart visualization code
```
            

*   Why did you pick the specific chart?
*   What is/are the insight(s) found from the chart?
* Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

5. You have to create at least 20 logical & meaningful charts having important insights.


[ Hints : - Do the Vizualization in  a structured way while following "UBM" Rule.

U - Univariate Analysis,

B - Bivariate Analysis (Numerical - Categorical, Numerical - Numerical, Categorical - Categorical)

M - Multivariate Analysis
 ]

# ***Let's Begin !***

## ***1. Know Your Data***

### Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""### Dataset Loading"""

# Load Dataset
from google.colab import drive
drive.mount('/content/drive')

"""###Uploading csv files"""

path ='/content/drive/MyDrive/DATA FOR PROJECT/'
df = pd.read_csv(path + 'Hotel Bookings.csv')

"""###Make a copy of both data set"""

Hotel_df = df.copy()

"""Making copy :- It is important to make a copy of the main data frame before any of the proccessing, as it prevents any permanent modification in main data frame in the proccess of EDA.

### Dataset First View
"""

# top 5 rows
Hotel_df.head()

"""### Dataset Rows & Columns count"""

#lets find how many rows and column in our dataset
Hotel_df.shape

"""We can see that our first data set contains 119390 rows and 32 columns.

### Dataset Information
"""

# Dataset Info
Hotel_df.info()

"""-->> We see that there are 32 columns in the dataframe and some columns like 'children', 'company', 'country' and 'agent' have null values.

-->> And also other columns have data type int64, float64 and object

#### Duplicate Values
"""

# Show no. of rows of duplicate rows duplicate
Hotel_df[Hotel_df.duplicated()].shape

"""--> There are 31994 duplicate rows

#### Missing Values/Null Values
"""

# Missing Values/Null Values Count
Hotel_df.isnull().sum().sort_values(ascending = False)[:6]

# Visualizing the missing values
Hotel_df[['company', 'agent', 'country', 'children']].loc[Hotel_df[['company', 'agent', 'country', 'children']].isnull().any(axis=1)]

"""### What did you know about your dataset?

- The dataset has a total of 119,390 entries (rows) and 32 columns.
- The columns contain a combination of data types, including float64, int64, and object.
- Some key columns in the dataset include:
  - `hotel`: Categorical variable indicating the type of hotel.
  - `is_canceled`: Binary variable (0 or 1) representing whether the booking was canceled.
  - `lead_time`: Number of days between the booking date and arrival date.
  - `arrival_date_year`, `arrival_date_month`, `arrival_date_week_number`, `arrival_date_day_of_month`: Columns representing arrival date information.
  - `stays_in_weekend_nights`, `stays_in_week_nights`: Number of weekend nights and week nights the guest stayed.
  - `adults`, `children`, `babies`: Number of adults, children, and babies included in the booking.
  - `meal`: Type of meal booked (e.g., Bed & Breakfast, Half Board, etc.).
  - `country`: Country of origin for the guest.
  - `market_segment`: Market segment designation.
  - `distribution_channel`: Booking distribution channel.
  - `previous_cancellations`: Number of previous cancellations by the guest.
  - `booking_changes`: Number of changes made to the booking.
  - `deposit_type`: Type of deposit made for the booking.
  - `agent`, `company`: ID of the travel agency or company associated with the booking.
  - `adr`: Average daily rate (price) of the booking.
  - `total_of_special_requests`: Number of special requests made by the guest.

Please note that this summary provides a brief overview of the dataset based on its structure and column descriptions. Further analysis and exploration would require a closer examination of the data distribution, relationships between variables, and specific research questions or objectives.

## ***2. Understanding Your Variables***
"""

# Dataset Columns
Hotel_df.columns

# Dataset Describe
Hotel_df.describe()

"""### Variables Description

**(1)- Hotel:** Type of hotel(City or Resort)

**(2)- is_cancelled:** If the booking was cancelled(1) or not(0)

**(3)- lead_time:** Number of days before the actual arrival of the guests

**(4)- arrival_date_year:** Year of arrival date

**(5)- arrival_date_month:** Month of arrival date

**(6)- arrival_date_week_number:** Week number of year for arrival date

**(7)- arrival_date_day_of_month:** Day of arrival date

**(8)- stays_in_weekend_nights:** Number of weekend nights(Saturday or Sunday) spent at the hotel by the guests.

**(9)- stays_in_weel_nights:** Number of weeknights(Monday to Friday) spent at the hotel by the guests.

**(10)- adults:** Number of adults among the guests

**(11)- children:** Number of children

**(12)- babies:** Number of babies

**(13)- meal:** Type of meal booked

**(14)- country:** country of the guests

**(15)-market_segment:** Designation of market segment

**(16)- distribution_channel:** Name of booking distribution channel

**(17)- is_repeated_guest:** If the booking was from a repeated guest(1) or not(0)

**(18)- previous_cancellation:** Number of previous bookings that were cancelled by the customer prior to the current booking

**(19)- previous_bookings_not_cancelled:** Number of previous bookins not cancelled by the customer prior to the current bookin

**(20)- reserved_room_type:** Code from room type reserved

**(21)- assigned_room_type:** Code of room type assigned

**(22)- booking_changes:** Number of changes made to the booking

**(23)- deposit_type:** Type of deposite made by the guest

**(24)- agent:** ID of travel agent who made the booking

**(25)- comapny:** ID of the company that made the booking

**(26)- days_in_waiting_list:** Number of the days the booking was in the waiting list

**(27)- customer_type:** Type of customer, assuming one of four categories

**(28)- adr:** Average daily rate

**(29)- required_car_parking_spaces:** Number of car parking spaces required bt the customer

**(30)- total_of_special_requesrs:** Number of special requests made by the customer

**(31)- reservation_statuse:** Reservation status(Canceled, check-out or no-show)

**(32)- reservation_status_date:** Date at which the last reservation status was updated

### Check Unique Values for each variable.
"""

# Check Unique Values for each variable.
Hotel_df.nunique()

"""-->Let's see unique values of some rows"""

Hotel_df['hotel'].unique()

Hotel_df['is_canceled'].unique()

Hotel_df['arrival_date_year'].unique()

Hotel_df['meal'].unique()

Hotel_df['market_segment'].unique()

Hotel_df['reserved_room_type'].unique()

Hotel_df['assigned_room_type'].unique()

Hotel_df['distribution_channel'].unique()

Hotel_df['children'].unique()    # This column has 0 as well as null values

"""## 3. ***Data Wrangling***

Data wrangling is the process of cleaning, transforming, and manipulating data so that it can be used in analysis. It is an important step in the Exploratory Data Analysis (EDA) process because real-world data is often messy and requires a lot of preprocessing before it is ready for analysis. Data wrangling can involve tasks such as handling missing values, detecting and handling outliers, converting data into a suitable format for analysis, and more. It is an iterative process that typically involves writing code in a programming language such as Python, and can take up a significant amount of time in the EDA process

## Data Wrangling Code

###Cleaning data

Cleaning data is important step before EDA as it will remove the irrelevant data that can affect the outcome of EDA.

While cleaning data we will perform following steps: \

**(1)-** Remove duplicate rows \
**(2)-** Handling missing values. \
**(3)-** Convert columns to appropriate datatypes. \
**(4)-** Adding important columns

###Step 1: Removing duplicate rows if any
"""

# Dropping duplicate values
Hotel_df.drop_duplicates(inplace = True)

Hotel_df.shape

"""--> After dropping duplicate values 87369 rows and 32 column remains

###Step2: Handling missing values.
"""

Hotel_df.isnull().sum().sort_values(ascending = False)[:6]

"""--> Since, company and agent columns have comany number and agent numbers as data. There may be some cases when customer didn't booked hotel via any agent or via any company. So in that case values can be null under these columns.

--> We will replace null values by 0 in these columns
"""

Hotel_df[['company','agent']] = Hotel_df[['company','agent']].fillna(0)

Hotel_df['children'].unique()

"""--> This column 'children' has 0 as value which means 0 children were present in group of customers who made that transaction. So, 'nan' values are the missing values due to error of recording data.

--> We will replace the null values under this column with mean value of children.
"""

Hotel_df['children'].fillna(Hotel_df['children'].mean(), inplace = True)

"""--> Next column with missing value is 'country'. This column represents the country of origin of customer.

--> Since, this column has datatype of string. We will replace the missing value with the mode of 'country' column.
"""

Hotel_df['country'].fillna('others', inplace = True)

# Checking if all null values are removed
Hotel_df.isnull().sum().sort_values(ascending = False)[:6]

"""-->
There are some rows with total number of adults, children or babies equal to zero. So we will remove such rows.
"""

Hotel_df[Hotel_df['adults']+Hotel_df['babies']+Hotel_df['children'] == 0].shape

Hotel_df.drop(Hotel_df[Hotel_df['adults']+Hotel_df['babies']+Hotel_df['children'] == 0].index, inplace = True)

"""###Step 3: Converting columns to appropriate datatypes."""

# Converting datatype of columns 'children', 'company' and 'agent' from float to int.
Hotel_df[['children', 'company', 'agent']] = Hotel_df[['children', 'company', 'agent']].astype('int64')

# changing datatype of column 'reservation_status_date' to data_type.
Hotel_df['reservation_status_date'] = pd.to_datetime(Hotel_df['reservation_status_date'], format = '%Y-%m-%d')

"""###Step 4: Adding important columns."""

# Adding total staying days in hotels
Hotel_df['total_stay'] = Hotel_df['stays_in_weekend_nights']+Hotel_df['stays_in_week_nights']

# Adding total people num as column, i.e. total people num = num of adults + children + babies
Hotel_df['total_people'] = Hotel_df['adults']+Hotel_df['children']+Hotel_df['babies']

"""--> We are adding this column so that we can analyse the stay length at hotels.

--> Lets see does length of stay affects the adr.
"""

plt.figure(figsize = (12,6))
sns.scatterplot(y = 'adr', x = 'total_stay', data = Hotel_df)
plt.show()

"""-->
We notice that there is an outlier in adr, so we will remove that for better scatter plot
"""

Hotel_df.drop(Hotel_df[Hotel_df['adr'] > 5000].index, inplace = True)

plt.figure(figsize = (12,6))
sns.scatterplot(y = 'adr', x = 'total_stay', data = Hotel_df)
plt.show()

"""--> From the scatter plot we can see that as length of total_stay increases the adr decreases. This means for longer stay, the better deal for customer can be finalised."""

Hotel_df.info()

"""###What all manipulations have you done and insights you found?

The dataset underwent some manipulations resulting in changes to the data structure. Here are the observed manipulations and insights:

Manipulations:
1. **Handling Missing Values**: Missing values in the 'children' and 'country' columns were addressed, although the specific method used is not mentioned.

2. **Data Type Conversion**: The data type of the 'children' column was changed from float to int. Similarly, the 'agent' and 'company' columns were converted from float to int.

3. **Creation of New Variables**: Two new variables were added to the dataset:
   - 'total_stay': The sum of 'stays_in_weekend_nights' and 'stays_in_week_nights', representing the total number of nights stayed.
   - 'total_people': The sum of 'adults', 'children', and 'babies', representing the total number of people in the booking.

Insights:

Without specific details about the analysis performed, it is not possible to provide precise insights from the manipulated dataset. However, some potential insights that could be derived from the dataset include:

1. **Booking Characteristics**: The dataset provides information about booking patterns, such as the lead time between booking and arrival, the distribution of booking changes, and the presence of repeated guests.

2. **Guest Demographics**: The dataset includes details about guest demographics, such as the number of adults, children, and babies in each booking, as well as their nationality and customer type.

3. **Booking Channels**: The dataset can reveal insights into the distribution channels used by guests to make bookings, such as online travel agencies or direct bookings through the hotel.

4. **Cancellations**: By examining the 'is_canceled' column, patterns related to booking cancellations can be explored, including reasons for cancellations and the impact of various factors on cancellation rates.

5. **Room Types and Amenities**: The dataset includes information about reserved and assigned room types, as well as special requests made by guests. Analyzing these variables can provide insights into guest preferences for specific room types and amenities.

6. **Pricing and Revenue Management**: The dataset contains data related to average daily rates (ADR), required car parking spaces, and the number of special requests. These variables can be analyzed to gain insights into pricing strategies and revenue management.

7. **Seasonality and Stay Patterns**: With variables such as arrival dates, the dataset can be analyzed to identify seasonal trends, the distribution of stays during weekends versus weekdays, and the total length of stays.

For more comprehensive analysis it would require detailed examination of the data, exploring relationships between variables, and addressing specific research questions or business objectives.

## ***4. Data Vizualization, Storytelling & Experimenting with charts : Understand the relationships between variables***

#### Chart - 1
"""

# Which agent makes most no. of bookings?
agent_df = pd.DataFrame(Hotel_df['agent'].value_counts()).reset_index().rename(columns = {'index':'agent','agent':'num_of_bookings'}).sort_values(by = 'num_of_bookings', ascending = False)
agent_df.drop(agent_df[agent_df['agent'] == 0].index, inplace = True)            # 0 represents that booking is not made by an agent
agent_df = agent_df[:10]                                                         # Selecting top 10 performing agents
plt.figure(figsize = (10,5))
ax=sns.barplot(x = 'agent', y = 'num_of_bookings', data = agent_df, order = agent_df.sort_values('num_of_bookings' ,ascending = False).agent)
ax.bar_label(ax.containers[0])
plt.title( 'No. of bookings done by agents',fontweight="light", size=20)

"""##### 1. Why did you pick the specific chart?

--> The chosen bar chart is an effective way to visualize and compare the number of bookings done by different agents. It provides clear and concise information about the top performing agents, with data labels on the bars for precise values. The chart is well-sized, visually appealing, and includes an informative title.

##### 2. What is/are the insight(s) found from the chart?

--> Agent no. 9 has made most no. of bookings.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> Yes, the gained insights from the visualization of the number of bookings done by agents can help create a positive business impact. By identifying the top-performing agents, the hotel management can recognize and acknowledge their contributions, potentially leading to strengthened relationships, increased collaboration, and improved business outcomes.

Regarding insights that may lead to negative growth, there are certain agents they have very less booking % so if we approach to them continuouly then it will cause a negative growth.

#### Chart - 2
"""

# Which room type is in most demand and which room type generates highest adr?
fig, axes = plt.subplots(1, 2, figsize=(18, 8))
sns.countplot(ax = axes[0], x = Hotel_df['assigned_room_type'])
sns.boxplot(ax = axes[1], x = Hotel_df['assigned_room_type'], y = Hotel_df['adr'])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen to visually analyze the distribution of assigned room types and their corresponding average daily rates (ADR) in a hotel booking dataset. The count plot provides an overview of the frequency of each room type, while the box plot shows the ADR distribution across different room types.

##### 2. What is/are the insight(s) found from the chart?

--> Most demanded room type is A, but better adr rooms are of type H, G and C also Hotels should increase the no. of room types A and H to maximise revenue.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The insights gained from the visualization of room types and their corresponding average daily rates (ADR) can help create a positive business impact. By analyzing the count of assigned room types (first plot) and the distribution of ADR across room types (second plot), the hotel management can identify which room types are in higher demand and command higher prices. This information can be used to optimize pricing strategies, allocate resources effectively, and maximize revenue generation.

Regarding insights that may lead to negative growth, it is not evident from the given vizualization. However, if the box plot reveals that certain room types have significantly lower ADR compared to others, it could indicate an issue with pricing or the perceived value of those room types. In such cases, it might be necessary to reassess pricing strategies, marketing efforts, or room amenities to avoid potential negative impacts on revenue and growth.

#### Chart - 3
"""

# Which meal type is most preffered meal of customers?
plt.figure( figsize=(10, 8))
ax = sns.countplot(x = Hotel_df['meal'])
ax.bar_label(ax.containers[0])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart, a countplot of meal types, was chosen to visualize the distribution of different meal options booked by guests. It provides a clear and concise representation of the frequency of each meal type, allowing for easy comparison and identification of the most popular meal choices among guests.

##### 2. What is/are the insight(s) found from the chart?

--> Most preferred meal type is BB (Bed and breakfast).

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The insights gained from the countplot of meal types can help create a positive business impact. By analyzing the count of different meal types, the hotel management can understand guest preferences and tailor their menu offerings and meal packages accordingly. This can enhance guest satisfaction, increase food and beverage revenue, and improve overall customer experience.

Regarding insights that may lead to negative growth, in this  countplot reveals a significantly low count for certain meal types, it could indicate a lack of popularity or demand for those options. In such cases, it might be necessary to reevaluate menu offerings, introduce new options, or revise pricing strategies to avoid negative impacts on revenue and guest satisfaction.

##(1) Hotel wise analysis

#### Chart - 4
"""

# What is percentage of bookings in each hotel?
grouped_by_hotel = Hotel_df.groupby('hotel')
d1 =pd.DataFrame((grouped_by_hotel.size()/Hotel_df.shape[0])*100).reset_index().rename(columns = {0:'Booking %'})      #Calculating percentage
plt.figure(figsize = (8,5))
ax = sns.barplot(x = d1['hotel'], y = d1['Booking %'] )
ax.bar_label(ax.containers[0])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart of a bar plot was chosen to visualize the booking percentages for different hotel types. It effectively presents a clear comparison between hotel types in terms of their booking percentages, allowing for easy interpretation and identification of the highest performing hotel type.

##### 2. What is/are the insight(s) found from the chart?

--> Around 60% bookings are for City hotel and 40% bookings are for Resort hotel.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the bar plot of booking percentages for different hotel types can help create a positive business impact. By analyzing the booking percentages, the hotel management can identify which hotel type has a higher demand and customer preference. This information can guide resource allocation, marketing strategies, and operational decisions to maximize revenue and customer satisfaction.

Regarding insights that may lead to negative growth, there is no any insight in this vizualization that may lead to negative growth.

#### Chart - 5
"""

# which hotel seems to make more revenue?
d3 = grouped_by_hotel['adr'].mean().reset_index().rename(columns = {'adr':'avg_adr'})   # calculating average adr
plt.figure(figsize = (8,5))
ax = sns.barplot(x = d3['hotel'], y = d3['avg_adr'] )
ax.bar_label(ax.containers[0])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen to visualize the average daily rate (ADR) for different hotel types. It provides a clear comparison of the ADR across hotel types, allowing the hotel management to identify any significant differences and make informed decisions regarding pricing strategies and revenue management.

##### 2. What is/are the insight(s) found from the chart?

--> Avg adr of Resort hotel is slightly lower than that of City hotel. Hence, City hotel seems to be making slightly more revenue.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the average daily rate (ADR) bar plot can help create a positive business impact. By analyzing the ADR across different hotel types, the management can identify the pricing performance and adjust strategies accordingly. Higher ADR suggests a potential for increased revenue and profitability.

Regarding insights that may lead to negative growth, if the bar plot reveals significantly lower ADR for a particular hotel type compared to others, it could indicate potential issues such as underpricing or lower perceived value. In such cases, the management might need to reassess their pricing strategy, consider value-added services, or explore opportunities for upselling to avoid negative impacts on revenue growth and profitability.

#### Chart - 6
"""

# which hotel seems to make more revenue?
d2 = grouped_by_hotel['lead_time'].median().reset_index().rename(columns = {'lead_time':'median_lead_time'})
plt.figure(figsize = (8,5))
ax = sns.barplot(x = d2['hotel'], y = d2['median_lead_time'] )
ax.bar_label(ax.containers[0])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen to visualize and compare the median lead time (the time between booking and arrival) for each hotel type. It provides a concise representation of the lead time differences, allowing for easy comparison between the two hotel types.

##### 2. What is/are the insight(s) found from the chart?

--> City hotel has slightly higher median lead time. Also median lead time is significantly higher in each case, this means customers generally plan their hotel visits way to early.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insight from the chart showing the median lead time for each hotel type may have both positive and negative implications. A shorter median lead time can be viewed positively as it indicates a shorter duration between booking and arrival, potentially attracting last-minute bookings and offering flexibility to guests. However, if the median lead time is significantly longer for a particular hotel type, it may indicate lower demand or inefficiencies in the booking process, which could potentially have a negative impact on occupancy rates and revenue.

#### Chart - 7
"""

# What is preferred stay length in each hotel?
not_canceled = Hotel_df[Hotel_df['is_canceled'] == 0]
s1 = not_canceled[not_canceled['total_stay'] < 15]
plt.figure(figsize = (10,5))
sns.countplot(x = s1['total_stay'], hue = s1['hotel'])
plt.show()

"""##### 1. Why did you pick the specific chart?

-->
The specific chart was chosen to visualize the distribution of the total stay duration for each hotel type. It allows for a comparison of the number of stays within different duration ranges, helping to understand the stay patterns for each hotel type.

##### 2. What is/are the insight(s) found from the chart?

--> Most common stay length is less than 4 days and generally people prefer City hotel for short stay, but for long stays, Resort Hotel is preferred.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the count plot showing the distribution of total stays (nights) for not-canceled bookings can potentially have a positive business impact. By understanding the distribution of stays, the hotel can optimize their inventory management, staffing, and resource allocation based on the length of stay patterns.

However, the count plot reveals a significant imbalance in the distribution of stays or a lack of bookings for longer stays, it may indicate missed opportunities for revenue generation. This imbalance could potentially lead to negative growth if the hotel fails to attract or cater to guests seeking longer stays, resulting in underutilized capacity and potential loss of revenue.

#### Chart - 8
"""

# Which hotel has longer waiting time?
d5 = pd.DataFrame(grouped_by_hotel['days_in_waiting_list'].mean().reset_index().rename(columns = {'days_in_waiting_list':'avg_waiting_period'}))
plt.figure(figsize = (8,5))
sns.barplot(x = d5['hotel'], y = d5['avg_waiting_period'] )
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen to visualize and compare the average waiting period in days for each hotel type. It provides a clear representation of the waiting period differences, allowing for easy comparison between the two hotel types. The bar plot effectively displays the average waiting periods, enabling the identification of any significant variations that may impact guest satisfaction and operational efficiency.

##### 2. What is/are the insight(s) found from the chart?

--> City hotel has significantly longer waiting time, hence City Hotel is much busier than Resort Hotel.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the bar plot showing the average waiting period for each hotel type may help create a positive business impact. A shorter average waiting period indicates improved customer satisfaction and operational efficiency. However, if there is a significantly longer average waiting period for a particular hotel type, it may lead to negative growth as it can result in customer dissatisfaction, potential booking cancellations, and damage to the hotel's reputation.

#### Chart - 9
"""

# Which hotel has higher bookings cancellation rate ?

# Selecting and counting number of cancelled bookings for each hotel.
cancelled_data = Hotel_df[Hotel_df['is_canceled'] == 1]
cancel_grp = cancelled_data.groupby('hotel')
D1 = pd.DataFrame(cancel_grp.size()).rename(columns = {0:'total_cancelled_bookings'})

# Counting total number of bookings for each type of hotel
grouped_by_hotel = Hotel_df.groupby('hotel')
total_booking = grouped_by_hotel.size()
D2 = pd.DataFrame(total_booking).rename(columns = {0: 'total_bookings'})
D3 = pd.concat([D1,D2], axis = 1)

# Calculating cancel percentage
D3['cancel_%'] = round((D3['total_cancelled_bookings']/D3['total_bookings'])*100,2)
D3

plt.figure(figsize = (10,5))
sns.barplot(x = D3.index, y = D3['cancel_%'])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen to visualize and compare the cancellation percentage for each hotel type. It allows for a clear comparison of the cancellation rates between the two hotel types, providing insights into potential differences in booking behavior and cancellation patterns.

##### 2. What is/are the insight(s) found from the chart?

--> Almost 30 % of City Hotel bookings got canceled.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the bar plot showing the cancellation percentage for each hotel type can help create a positive business impact. A lower cancellation percentage indicates better reservation management, higher guest satisfaction, and improved revenue stability. However, if a particular hotel type has a significantly higher cancellation percentage compared to others, it may lead to negative growth as it suggests potential issues with customer experience, pricing, or marketing strategies, resulting in lost revenue and reduced profitability.

#### Chart - 10
"""

#  Which hotel has high chance that its customer will return for another stay?

# Selecting and counting repeated customers bookings
repeated_data = Hotel_df[Hotel_df['is_repeated_guest'] == 1]
repeat_grp = repeated_data.groupby('hotel')
D1 = pd.DataFrame(repeat_grp.size()).rename(columns = {0:'total_repeated_guests'})

# Counting total bookings
total_booking = grouped_by_hotel.size()
D2 = pd.DataFrame(total_booking).rename(columns = {0: 'total_bookings'})
D3 = pd.concat([D1,D2], axis = 1)

# Calculating repeat %
D3['repeat_%'] = round((D3['total_repeated_guests']/D3['total_bookings'])*100,2)

plt.figure(figsize = (10,5))
sns.barplot(x = D3.index, y = D3['repeat_%'])
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen to visualize the percentage of repeated guests for each hotel type. It provides a clear comparison of the repeat guest rate, allowing for an assessment of customer loyalty and the effectiveness of strategies to encourage guest retention and repeat bookings.

##### 2. What is/are the insight(s) found from the chart?

--> Both hotels have very small percentage that customer will repeat, but Resort hotel has slightly higher repeat % than City Hotel.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the bar plot showing the percentage of repeated guests for each hotel type can help create a positive business impact. A higher repeat percentage indicates strong customer loyalty, increased customer lifetime value, and positive word-of-mouth recommendations. This can lead to improved customer retention, higher occupancy rates, and long-term revenue growth.

Conversely, if a particular hotel type has a significantly lower repeat percentage compared to others, it may suggest potential issues with guest satisfaction, service quality, or targeted marketing strategies. This could lead to negative growth as it indicates a higher churn rate and a lower likelihood of guests returning to the hotel. Addressing these issues becomes crucial to improve guest loyalty and drive positive business impact.

##(2) Distribution Channel wise Analysis

#### Chart - 11
"""

# Which is the most common channel for booking hotels?
group_by_dc = Hotel_df.groupby('distribution_channel')
d1 = pd.DataFrame(round((group_by_dc.size()/Hotel_df.shape[0])*100,2)).reset_index().rename(columns = {0: 'Booking_%'})
plt.figure(figsize = (8,8))
data = d1['Booking_%']
labels = d1['distribution_channel']
plt.pie(x=data, autopct="%.2f%%", explode=[0.05]*5, labels=labels, pctdistance=0.5)
plt.title("Booking % by distribution channels", fontsize=14)
plt.show()

"""##### 1. Why did you pick the specific chart?

--> The specific chart was chosen as a pie chart to visualize the distribution of bookings across different distribution channels. A pie chart allows for a clear representation of the proportion of bookings attributed to each distribution channel, enabling easy comparison and understanding of the booking distribution pattern among various channels.

##### 2. What is/are the insight(s) found from the chart?

-> The insight from the pie chart "Booking % by distribution channels" shows the distribution of bookings across different distribution channels. It provides a visual representation of the percentage contribution of each distribution channel to the total bookings in the dataset.the distribution channel TA/TO have high booking percentage.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

--> The gained insights from the pie chart showing the booking percentage by distribution channels can potentially help create a positive business impact. It provides an overview of the distribution channel contribution to the overall bookings, allowing the hotel to optimize marketing strategies, allocate resources effectively, and tailor their approach to the most successful channels.

However, if certain distribution channels have a significantly lower booking percentage compared to others such as GDS, Corporate and Undefined ,then it  indicate a less effective or underutilized channel. This lead to negative growth as it suggests missed opportunities for reaching potential guests and generating bookings. Identifying and addressing the reasons behind the lower booking percentage in specific channels becomes crucial to maximize revenue potential and drive positive business impact.

#### Chart - 12
"""

# Which channel is mostly used for early booking of hotels?
group_by_dc = Hotel_df.groupby('distribution_channel')
d2 = pd.DataFrame(round(group_by_dc['lead_time'].median(),2)).reset_index().rename(columns = {'lead_time': 'median_lead_time'})
plt.figure(figsize = (7,5))
sns.barplot(x = d2['distribution_channel'], y = d2['median_lead_time'])
plt.show()

"""--> TA/TO is mostly used for planning Hotel visits ahead of time. But for sudden visits other mediums are most preferred.

#### Chart - 13
"""

# Which channel has longer average waiting time?
d4 = pd.DataFrame(round((group_by_dc['days_in_waiting_list']).mean(),2)).reset_index().rename(columns = {'days_in_waiting_list': 'avg_waiting_time'})
plt.figure(figsize = (7,5))
sns.barplot(x = d4['distribution_channel'], y = d4['avg_waiting_time'])
plt.show()

"""--> While booking via TA/TO one may have to wait a little longer to confirm booking of rooms.

#### Chart - 14
"""

# Which distribution channel brings better revenue generating deals for hotels?
group_by_dc_hotel = Hotel_df.groupby(['distribution_channel', 'hotel'])
d5 = pd.DataFrame(round((group_by_dc_hotel['adr']).agg(np.mean),2)).reset_index().rename(columns = {'adr': 'avg_adr'})
plt.figure(figsize = (7,5))
sns.barplot(x = d5['distribution_channel'], y = d5['avg_adr'], hue = d5['hotel'])
plt.ylim(40,140)
plt.show()

"""--> Resort hotel has more revnue generating deals by direct and TA/TO channel. Resort Hotel need to increase outreach on GDS channel to increase revenue.

##(3) Booking cancellation Analysis

--> Let us try to understand what causes the people to cancel the booking.

#### Chart - 15
"""

# Which significant distribution channel has highest cancellation percentage?
d1 = pd.DataFrame((group_by_dc['is_canceled'].sum()/group_by_dc.size())*100).drop(index = 'Undefined').rename(columns = {0: 'Cancel_%'})
plt.figure(figsize = (10,5))
sns.barplot(x = d1.index, y = d1['Cancel_%'])
plt.show()

"""--> TA/TO has highest booking cancellation %. Therefore, a booking via TA/TO is 30% likely to get cancelled.

--> Let us see what causes the cancelation of bookings of rooms by customers

#### Chart - 16

--> One question can arise that may be longer waiting period or longer lead time causes the cancellation of bookings, let us check that.
"""

waiting_bookings = Hotel_df[Hotel_df['days_in_waiting_list'] !=0]  # Selecting bookings with non zero waiting time

fig, axes = plt.subplots(1, 2, figsize=(18, 8))
sns.kdeplot(ax=axes[0],x = 'days_in_waiting_list', hue = 'is_canceled' , data = waiting_bookings)
sns.kdeplot(ax = axes[1], x = Hotel_df['lead_time'], hue = Hotel_df['is_canceled'])
plt.show()

"""--> We see that most of the bookings that are cancelled have waiting period of less 150 days but also most of bookings that are not cancelled also have waiting period less than 150 days. Hence this shows that waiting period has no effect on cancellation of bookings.

Also, lead time has no affect on cancellation of bookings, as both curves of cancelation and not cncelation are similar for lead time too.

#### Chart - 17

--> Now we will check whether not getting allotted the same room type as demanded is the cause of cancellation of bookings
"""

def check_room_allot(x):
  if x['reserved_room_type'] != x['assigned_room_type']:
    return 1
  else:
    return 0

Hotel_df['same_room_not_alloted'] = Hotel_df.apply(lambda x : check_room_allot(x), axis = 1)
grp_by_canc = Hotel_df.groupby('is_canceled')

D3 = pd.DataFrame((grp_by_canc['same_room_not_alloted'].sum()/grp_by_canc.size())*100).rename(columns = {0: 'same_room_not_alloted_%'})
plt.figure(figsize = (10,7))
sns.barplot(x = D3.index, y = D3['same_room_not_alloted_%'])
plt.show()

"""--> We see that not getting same room as demanded is not the case of cancellation of rooms. A significant percentage of bookings are not cancelled even after getting different room as demanded.

#### Chart - 18

--> Lets see does not getting same room affects the adr.
"""

plt.figure(figsize = (12,6))
sns.boxplot(x = 'same_room_not_alloted', y = 'adr', data = Hotel_df)
plt.show()

"""--> So not getting same room do affects the adr, people who didn't got same room have paid a little lower adr, except for few exceptions.

#### Chart - 19
"""

# Which are the most busy months?
d_month = Hotel_df['arrival_date_month'].value_counts().reset_index()
d_month.columns=['months','Number of guests']
d_month
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
d_month['months'] = pd.Categorical(d_month['months'], categories=months, ordered=True)
d_month.sort_values('months').reset_index()

data_resort = Hotel_df[(Hotel_df['hotel'] == 'Resort Hotel') & (Hotel_df['is_canceled'] == 0)]
data_city = Hotel_df[(Hotel_df['hotel'] == 'City Hotel') & (Hotel_df['is_canceled'] == 0)]

resort_guest = data_resort['arrival_date_month'].value_counts().reset_index()
resort_guest.columns=['month','no of guests in resort']
resort_guest

city_guest = data_city['arrival_date_month'].value_counts().reset_index()
city_guest.columns=['month','no of guest in city hotel']
city_guest

final_guest=resort_guest.merge(city_guest, on = 'month')
final_guest

months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
final_guest['month'] = pd.Categorical(final_guest['month'], categories=months, ordered=True)
final_guest = final_guest.sort_values('month').reset_index().drop('index',axis=1)

#Which month get most visitors?
sns.lineplot(data=final_guest, x='month', y='no of guests in resort')
sns.lineplot(data=final_guest, x='month', y='no of guest in city hotel')
plt.legend(['Resort','City Hotel'])
plt.ylabel('Number of guest')
fig = plt.gcf()
fig.set_size_inches(15,10)
plt.grid()

"""--> Most number of guest comes in month of August.

#### Chart - 20

--> Now lets see which month results in high revenue.
"""

data_resort1 = Hotel_df[(Hotel_df['hotel'] == 'Resort Hotel') & (Hotel_df['is_canceled'] == 0)]
data_city1 = Hotel_df[(Hotel_df['hotel'] == 'City Hotel') & (Hotel_df['is_canceled'] == 0)]

resort_hotel1 = data_resort.groupby(['arrival_date_month'])['adr'].mean().reset_index()
city_hotel1=data_city.groupby(['arrival_date_month'])['adr'].mean().reset_index()
final_hotel1 = resort_hotel1.merge(city_hotel1, on = 'arrival_date_month')
final_hotel1.columns = ['month', 'price_for_resort', 'price_for_city_hotel']

months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
final_hotel1['month'] = pd.Categorical(final_hotel1['month'], categories=months, ordered=True)
final_hotel = final_hotel1.sort_values('month').reset_index().drop('index',axis=1)

sns.lineplot(data=final_hotel, x='month', y='price_for_resort')
sns.lineplot(data=final_hotel1, x='month', y='price_for_city_hotel')
plt.legend(['Resort','City Hotel'])
plt.ylabel('adr')
fig = plt.gcf()
fig.set_size_inches(15,10)
plt.grid()

reindex = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

Hotel_df['arrival_date_month'] = pd.Categorical(Hotel_df['arrival_date_month'], categories=reindex, ordered=True)

grouped_data = [Hotel_df.loc[Hotel_df['arrival_date_month'] == month, 'adr'] for month in reindex]

colors = ['orange', 'blue', 'green', 'red', 'purple', 'yellow', 'pink', 'brown', 'gray', 'cyan', 'magenta', 'lime']

fig, ax = plt.subplots(figsize=(15, 8))

# Plot the boxplots with individual colors
boxplot = ax.boxplot(grouped_data, labels=reindex, patch_artist=True)

# Set the facecolor of each box
for box, color in zip(boxplot['boxes'], colors):
    box.set(facecolor=color)

ax.set_xlabel('Months')
ax.set_ylabel('ADR')

plt.show()

"""--> Avg adr rises from beginning of year upto middle of year and reaches peak at August and then lowers to the end of year. But hotels do make some good deals with high adr at end of year also.

#### Chart - 21

--> Now let us check the trend of arrival_num and avg adr within a month.
"""

trend_data =pd.DataFrame(not_canceled.groupby('arrival_date_day_of_month')['adr'].count()).rename(columns={'adr':'Arrival_num'})
trend_data['avg_adr'] = not_canceled.groupby('arrival_date_day_of_month')['adr'].mean()
trend_data=trend_data.reset_index()

fig, axes = plt.subplots(1, 2, figsize=(18, 8))

# Plotting arrival num for each day of month
l = trend_data.plot(ax=axes[0], x='arrival_date_day_of_month', y='Arrival_num')
axes[0].set_title('Trend of arrival throughout the month',fontweight="bold")
axes[0].set_ylabel('Arrival_num')
axes[0].set_xlabel('arrival_date_day_of_month')
l.grid()
l.set_xticks([1, 7, 14, 21, 28, 31])
l.set_xticklabels([1, 7, 14, 21, 28, 31])

# # Plotting avg adr for each day of month
m = trend_data.plot(ax=axes[1], x='arrival_date_day_of_month', y='avg_adr')
axes[1].set_title('Trend of avg_adr throughout the month',fontweight="bold")
axes[1].set_ylabel('avg_adr')
axes[1].set_xlabel('arrival_date_day_of_month')
m.grid()
m.set_xticks([1, 7, 14, 21, 28, 31])
m.set_xticklabels([1, 7, 14, 21, 28, 31])

#plt.tight_layout()  # Adjust spacing between subplots
plt.show()

"""--> We can see that graph Arrival_num has small peaks at regular interval of days. This can be due to increase in arrival weekend.

-->
Also the avg adr tends to go up as month ends. Therefore charge more at the end of month.

#### Chart - 22

--> Let us divide our customers in three categories of single, couple and family/friends. then check their booking %
"""

# Filter the data for each category
single = not_canceled[(not_canceled['adults'] == 1) & (not_canceled['children'] == 0) & (not_canceled['babies'] == 0)]
couple = not_canceled[(not_canceled['adults'] == 2) & (not_canceled['children'] == 0) & (not_canceled['babies'] == 0)]
family = not_canceled[not_canceled['adults'] + not_canceled['children'] + not_canceled['babies'] > 2]

# Define the order of months
reindex = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Group the data by month and count the occurrences for each category
grouped_data = pd.DataFrame()
grouped_data['single'] = single.groupby('arrival_date_month').size()
grouped_data['couple'] = couple.groupby('arrival_date_month').size()
grouped_data['family'] = family.groupby('arrival_date_month').size()

# Reorder the rows of the DataFrame using the defined order of months
grouped_data = grouped_data.reindex(reindex)

# Create the plot
fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(data=grouped_data, markers=True, ax=ax)

# Set the x-axis labels to the month names
ax.set_xticklabels(reindex)

# Add grid lines
plt.grid()

# Show the plot
plt.show()

"""--> Moslty bookings are done by couples(although we are not sure that they are couple as data doesn't tell about that)

--> It is clear from graph that their is a sudden surge in arrival num of couples and family in months of July and August. So better plans can be planned accordingly at that time for these type of customers.

#### Chart - 23

--> What if you wanted to predict whether or not a hotel was likely to receive a disproportionately high number of special requests?
"""

plt.figure(figsize=(15, 10))

# Extract the data for plotting
x_data = Hotel_df["market_segment"]
y_data = Hotel_df["total_of_special_requests"]

# Use boxplot to plot the data
boxplot = plt.boxplot([y_data[x_data == segment] for segment in x_data.unique()], labels=x_data.unique(), patch_artist=True)

# Set the color of the boxes
colors = ['orange', 'blue', 'green', 'red', 'purple', 'yellow', 'pink', 'brown', 'gray', 'cyan', 'magenta', 'lime']
for box, color in zip(boxplot['boxes'], colors):
    box.set(facecolor=color)

# Add a legend
plt.legend(boxplot['boxes'], x_data.unique())

# Set labels and title
plt.xlabel('Market Segment')
plt.ylabel('Total Special Requests')
plt.title('Special Requests by Market Segment')

plt.show()

"""--> All of market segment mostly have special request.

#### Chart - 24

--> From where the most guests are coming ?
"""

grouped_by_country =Hotel_df.groupby('country')
d1 = pd.DataFrame(grouped_by_country.size()).reset_index().rename(columns = {0:'Count'}).sort_values('Count', ascending = False)[:10]
sns.barplot(x = d1['country'], y  = d1['Count'])
plt.show()

"""--> Most guest are from Portugal and other Europian contries.

#### Chart - 25 - Correlation Heatmap
"""

num_Hotel_df = Hotel_df[['lead_time','previous_cancellations','previous_bookings_not_canceled','booking_changes','days_in_waiting_list','adr','required_car_parking_spaces','total_of_special_requests','total_stay','total_people']]

#correlation matrix
corrmat = num_Hotel_df.corr()
corrmat

f, ax = plt.subplots(figsize=(12, 7))
sns.heatmap(corrmat,annot = True,fmt='.2f', annot_kws={'size': 10}, vmax=.8,  square=True);

"""--> Total stay length and lead time have slight correlation. This may means that for longer hotel stays people generally plan little before the the actual arrival.

--> adr is slightly correlated with total_people, which makes sense as more no. of people means more revenue, therefore more adr.

## **5. Solution to Business Objective**

#### What do you suggest the client to achieve Business Objective ?
Explain Briefly.

Here are some suggestions to help the client achieve their business objectives:

1. Strengthen Agent Relationships: Since Agent no. 9 has made the most number of bookings, it would be beneficial to strengthen the relationship with this agent. Provide them with additional incentives, exclusive deals, or support to further increase their bookings.

2. Room Type Optimization: Increase the availability of Room Type A as it is the most demanded, and focus on promoting Room Types H, G, and C that generate higher ADR. This can help maximize revenue by offering popular room types and capturing higher-paying guests.

3. Enhance Meal Offerings: Since the most preferred meal type is Bed and Breakfast (BB), consider offering attractive BB packages and promotions. This can attract more customers and potentially increase revenue by upselling meal options.

4. Channel Management: While TA/TO is the most preferred channel for bookings, it is important to maintain a presence on other channels as well. Diversify the distribution channels and optimize marketing strategies to target different customer segments and capture bookings from multiple sources.

5. Target Busy Months: July and August are identified as the busiest and most profitable months. Allocate resources, marketing efforts, and promotional campaigns specifically for these months to maximize revenue and capitalize on the high demand.

6. Focus on European Market: With a significant number of guests coming from European countries, especially Portugal, tailor marketing campaigns and offers to attract more guests from these regions. Consider partnering with local travel agencies or tour operators in these countries for targeted promotions.

7. Enhance Guest Loyalty: Develop customer loyalty programs and incentives to encourage repeat bookings. Although the overall repeat percentage is low, focusing on enhancing the guest experience, personalized offers, and exceptional service can help increase customer retention and drive repeat bookings.

8. Optimize Revenue Management: Analyze pricing strategies, especially for City hotel which has higher ADR and more bookings. Implement dynamic pricing models, offer packages or deals during off-peak periods to maximize revenue potential.

9. Improve Lead Time Planning: Since lead time is relatively higher for both hotels, focus on engaging potential guests earlier in their booking journey. Implement early-bird promotions, advance booking discounts, or exclusive offers for customers who plan their stays well in advance.

10. Improve Booking Experience: Continuously work on optimizing the booking process, ensuring guests receive their preferred room types whenever possible, and reducing waiting periods. Streamline operations to provide a seamless and efficient booking experience.

By implementing these suggestions, the client can enhance customer satisfaction, increase revenue, attract more guests, and improve overall business performance.

# **Conclusion**

--> Around 60% bookings are for City hotel and 40% bookings are for Resort hotel, therefore City Hotel is busier than Resort hotel. Also the overall adr of City hotel is slightly higher than Resort hotel.

--> Mostly guests stay for less than 5 days in hotel and for longer stays Resort hotel is preferred.

--> Both hotels have significantly higher booking cancellation rates and very few guests less than 3 % return for another booking in City hotel. 5% guests return for stay in Resort hotel.

--> Most of the guests came from european countries, with most of guests coming from Portugal.

--> Guests use different channels for making bookings out of which most preferred way is TA/TO.

--> For hotels higher adr deals come via GDS channel, so hotels should increase their popularity on this channel.

--> Almost 30% of bookings via TA/TO are cancelled.

--> Not getting same room as reserved, longer lead time and waiting time do not affect cancellation of bookings. Although different room allotment do lowers the adr.

--> July- August are the most busier and profitable months for both of hotels.

--> Within a month, adr gradually increases as month ends, with small sudden rise on weekends.

--> Couples are the most common guests for hotels, hence hotels can plan services according to couples needs to increase revenue.

--> More number of people in guests results in more number of special requests.

--> Bookings made via complementary market segment and adults have on average high no. of special request.

--> For customers, generally the longer stays (more than 15 days) can result in better deals in terms of low adr.

And many more conclusions.

### ***Hurrah! I have successfully completed your EDA Capstone Project !!!***
"""
